// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "clientExtensions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  fullname    String  
  email       String      @unique
  password    String  
  privilege   Privilege   @default(MEMBER)
  tokens      Token[]
}

model Condition {
  id            Int               @id @default(autoincrement())
  question      Question          @relation(fields: [questionId], references: [id])
  questionId    Int               
  answer        Answer            @relation(fields: [answerId], references: [id])
  answerId      Int               @unique
  nextSection   QuestionSection   @relation("NextSection", fields: [nextSectionId], references: [id])
  nextSectionId Int

  @@unique([questionId, answerId])
}

model QuestionSection {
  id                Int               @id @default(autoincrement())
  title             String
  questions         Question[]  
  conditioned       Condition[]       @relation("NextSection")
  
  // This is for direct section succession
  nextSection       QuestionSection?  @relation(name: "SectionSuccession", fields: [nextSectionId], references: [id])
  nextSectionId     Int?              @unique
  previousSection   QuestionSection?  @relation(name: "SectionSuccession")
}

model Question {
  id                Int               @id @default(autoincrement())
  title             String
  required          Boolean
  type              QuestionType
  hasOther          Boolean?
  submissions       Submission[]
  answers           Answer[]
  regex             String?

  nextQuestion      Question?         @relation(name: "QuestionSuccession", fields: [nextQuestionId], references: [id])
  nextQuestionId    Int?              @unique  
  previousQuestion  Question?         @relation(name: "QuestionSuccession")
  
  section           QuestionSection   @relation(fields: [sectionId], references: [id])
  sectionId         Int

  conditions        Condition[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  title       String
  question    Question     @relation(fields: [questionId], references: [id])
  questionId  Int
  submissions Submission[]
  condition   Condition?

  @@unique([questionId, title])
}

model Submission {
  id            Int       @id @default(autoincrement())
  question      Question  @relation(fields: [questionId], references: [id])
  questionId    Int
  answer        Answer?   @relation(fields: [answerId], references: [id])
  answerId      Int?
  submissionId  String    
  other         String?
  submittedAt   DateTime  @default(now())

  @@unique([questionId, answerId, submissionId])
}

model Token {
  id            Int           @id @default(autoincrement())
  token         String        @unique
  user          User?         @relation(fields: [userId], references: [id])
  userId        Int?
  submitted     Boolean       @default(false)
  application   Application?
  createdAt     DateTime      @default(now())
}

model Application {
  id          Int                   @id @default(autoincrement())
  fullname    String
  email       String                @unique
  status      ApplicationStatus     @default(PENDING)
  token       Token?                @relation(fields: [tokenId], references: [id])
  tokenId     Int?                  @unique
}

enum ApplicationStatus {
  PENDING
  GRANTED
  REJECTED
}

enum Privilege {
  ADMIN
  MEMBER
}

enum QuestionType {
  FREEFIELD
  SINGLE_CHOICE
  MULTIPLE_CHOICES
}
