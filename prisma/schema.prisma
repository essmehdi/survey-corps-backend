generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FormConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
}

model RegistrationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
}

model User {
  id                Int                @id @default(autoincrement())
  fullname          String
  email             String             @unique
  password          String?
  privilege         Privilege          @default(MEMBER)
  isActive          Boolean            @default(false)
  tokens            Token[]
  registrationToken RegistrationToken?
}

model Condition {
  id            Int             @id @default(autoincrement())
  questionId    Int
  answerId      Int             @unique
  nextSectionId Int
  answer        Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  nextSection   QuestionSection @relation("NextSection", fields: [nextSectionId], references: [id], onDelete: Cascade)
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, answerId])
}

model QuestionSection {
  id               Int               @id @default(autoincrement())
  title            String
  nextSectionId    Int?
  conditioned      Condition[]       @relation("NextSection")
  questions        Question[]
  nextSection      QuestionSection?  @relation("SectionSuccession", fields: [nextSectionId], references: [id], onDelete: SetNull)
  previousSections QuestionSection[] @relation("SectionSuccession")
}

model Question {
  id               Int             @id @default(autoincrement())
  title            String
  required         Boolean
  type             QuestionType
  hasOther         Boolean?
  regex            String?
  nextQuestionId   Int?            @unique
  sectionId        Int
  answers          Answer[]
  conditions       Condition[]
  nextQuestion     Question?       @relation("QuestionSuccession", fields: [nextQuestionId], references: [id])
  previousQuestion Question?       @relation("QuestionSuccession")
  section          QuestionSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  submissions      Submission[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  title       String
  questionId  Int
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  condition   Condition?
  submissions Submission[]

  @@unique([questionId, title])
}

model Submission {
  id           Int      @id @default(autoincrement())
  questionId   Int
  answerId     Int?
  other        String?
  submittedAt  DateTime @default(now())
  submissionId String
  answer       Answer?  @relation(fields: [answerId], references: [id], onDelete: NoAction)
  question     Question @relation(fields: [questionId], references: [id], onDelete: NoAction)

  @@unique([questionId, answerId, submissionId])
}

model Token {
  id          Int          @id @default(autoincrement())
  token       String       @unique
  userId      Int?
  createdAt   DateTime     @default(now())
  submitted   Boolean      @default(false)
  application Application?
  user        User?        @relation(fields: [userId], references: [id])
}

model Application {
  id       Int               @id @default(autoincrement())
  fullname String
  email    String            @unique
  status   ApplicationStatus @default(PENDING)
  tokenId  Int?              @unique
  token    Token?            @relation(fields: [tokenId], references: [id])
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum ApplicationStatus {
  PENDING
  GRANTED
  REJECTED
}

enum Privilege {
  ADMIN
  MEMBER
}

enum QuestionType {
  FREEFIELD
  SINGLE_CHOICE
  MULTIPLE_CHOICES
}
